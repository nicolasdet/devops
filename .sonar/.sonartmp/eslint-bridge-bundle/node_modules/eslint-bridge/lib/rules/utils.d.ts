import { Rule } from "eslint";
import * as estree from "estree";
/**
 * Returns the module name, when an identifier represents a namespace for that module.
 * Returns undefined otherwise.
 * example: Given `import * as X from 'module_name'`, `getModuleNameOfIdentifier(X)` returns `module_name`
 */
export declare function getModuleNameOfIdentifier(identifier: estree.Identifier, context: Rule.RuleContext): estree.SimpleLiteral | estree.RegExpLiteral | undefined;
/**
 * Returns the module name, when an identifier represents a binding imported from another module.
 * Returns undefined otherwise.
 * example: Given `import { f } from 'module_name'`, `getModuleNameOfImportedIdentifier(f)` returns `module_name`
 */
export declare function getModuleNameOfImportedIdentifier(identifier: estree.Identifier, context: Rule.RuleContext): estree.SimpleLiteral | estree.RegExpLiteral | undefined;
export declare function isIdentifier(node: estree.Node, ...values: string[]): node is estree.Identifier;
export declare function isMemberWithProperty(node: estree.Node, ...values: string[]): boolean;
export declare function isMemberExpression(node: estree.Node, objectValue: string, ...propertyValue: string[]): boolean;
export declare function isRequireModule(node: estree.CallExpression, ...moduleNames: string[]): boolean;
