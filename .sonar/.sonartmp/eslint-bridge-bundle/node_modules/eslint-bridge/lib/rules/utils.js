"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns the module name, when an identifier represents a namespace for that module.
 * Returns undefined otherwise.
 * example: Given `import * as X from 'module_name'`, `getModuleNameOfIdentifier(X)` returns `module_name`
 */
function getModuleNameOfIdentifier(identifier, context) {
    const { name } = identifier;
    // check if importing using `import * as X from 'module_name'`
    const importDeclaration = getImportDeclarations(context).find(importDecl => isNamespaceSpecifier(importDecl, name));
    if (importDeclaration) {
        return importDeclaration.source;
    }
    // check if importing using `const X = require('module_name')`
    const writeExpression = getUniqueWriteUsage(context, name);
    if (writeExpression) {
        return getModuleNameFromRequire(writeExpression);
    }
    return undefined;
}
exports.getModuleNameOfIdentifier = getModuleNameOfIdentifier;
/**
 * Returns the module name, when an identifier represents a binding imported from another module.
 * Returns undefined otherwise.
 * example: Given `import { f } from 'module_name'`, `getModuleNameOfImportedIdentifier(f)` returns `module_name`
 */
function getModuleNameOfImportedIdentifier(identifier, context) {
    // check if importing using `import { f } from 'module_name'`
    const importedDeclaration = getImportDeclarations(context).find(({ specifiers }) => specifiers.some(spec => spec.type === "ImportSpecifier" && spec.imported.name === identifier.name));
    if (importedDeclaration) {
        return importedDeclaration.source;
    }
    // check if importing using `const f = require('module_name').f`
    const writeExpression = getUniqueWriteUsage(context, identifier.name);
    if (writeExpression &&
        writeExpression.type === "MemberExpression" &&
        isIdentifier(writeExpression.property, identifier.name)) {
        return getModuleNameFromRequire(writeExpression.object);
    }
    return undefined;
}
exports.getModuleNameOfImportedIdentifier = getModuleNameOfImportedIdentifier;
function getImportDeclarations(context) {
    const program = context.getAncestors().find(node => node.type === "Program");
    if (program.sourceType === "module") {
        return program.body.filter(node => node.type === "ImportDeclaration");
    }
    return [];
}
function isNamespaceSpecifier(importDeclaration, name) {
    return importDeclaration.specifiers.some(({ type, local }) => type === "ImportNamespaceSpecifier" && local.name === name);
}
function getModuleNameFromRequire(node) {
    if (node.type === "CallExpression" &&
        isIdentifier(node.callee, "require") &&
        node.arguments.length === 1) {
        const moduleName = node.arguments[0];
        if (moduleName.type === "Literal") {
            return moduleName;
        }
    }
    return undefined;
}
function getUniqueWriteUsage(context, name) {
    let scope = context.getScope();
    let variable;
    while (variable == null && scope != null) {
        variable = scope.variables.find(value => value.name === name);
        scope = scope.upper;
    }
    if (variable) {
        const writeReferences = variable.references.filter(reference => reference.isWrite());
        if (writeReferences.length === 1 && writeReferences[0].writeExpr) {
            return writeReferences[0].writeExpr;
        }
    }
    return undefined;
}
function isIdentifier(node, ...values) {
    return node.type === "Identifier" && values.some(value => value === node.name);
}
exports.isIdentifier = isIdentifier;
function isMemberWithProperty(node, ...values) {
    return node.type === "MemberExpression" && isIdentifier(node.property, ...values);
}
exports.isMemberWithProperty = isMemberWithProperty;
function isMemberExpression(node, objectValue, ...propertyValue) {
    if (node.type === "MemberExpression") {
        const { object, property } = node;
        if (isIdentifier(object, objectValue) && isIdentifier(property, ...propertyValue)) {
            return true;
        }
    }
    return false;
}
exports.isMemberExpression = isMemberExpression;
function isRequireModule(node, ...moduleNames) {
    if (isIdentifier(node.callee, "require") && node.arguments.length === 1) {
        const argument = node.arguments[0];
        if (argument.type === "Literal") {
            return moduleNames.includes(String(argument.value));
        }
    }
    return false;
}
exports.isRequireModule = isRequireModule;
//# sourceMappingURL=utils.js.map