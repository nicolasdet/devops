"use strict";
/*
 * SonarQube JavaScript Plugin
 * Copyright (C) 2011-2019 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
// https://jira.sonarsource.com/browse/RSPEC-4825
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
const MESSAGE = `Make sure that this HTTP request is sent safely.`;
const httpFunctions = new Set(["request", "get"]);
const requestFunctions = [
    "request",
    "get",
    "post",
    "put",
    "patch",
    "del",
    "delete",
    "head",
    "options",
];
const jQueryFunctions = ["ajax", "get", "getJson", "getScript", "post", "load"];
const httpModules = {
    http: httpFunctions,
    https: httpFunctions,
    request: new Set(requestFunctions),
    axios: new Set(["axios", ...requestFunctions]),
};
const httpRequestConstructors = new Set(["XMLHttpRequest", "ActiveXObject", "XDomainRequest"]);
let openCalls = [];
let isHttpRequestObjectCreated = false;
exports.rule = {
    create(context) {
        return {
            Program() {
                // init flag for each file
                openCalls = [];
                isHttpRequestObjectCreated = false;
            },
            NewExpression(node) {
                const { callee } = node;
                if (isGlobalIdentifier(callee, ...httpRequestConstructors)) {
                    isHttpRequestObjectCreated = true;
                }
            },
            CallExpression: (node) => checkCallExpression(node, context),
            "Program:exit"() {
                if (isHttpRequestObjectCreated) {
                    openCalls.forEach(callee => context.report({ message: MESSAGE, node: callee }));
                }
            },
        };
    },
};
function checkCallExpression({ callee }, context) {
    // check for fetch API and jQuery API
    if (isGlobalIdentifier(callee, "fetch") ||
        utils_1.isMemberExpression(callee, "$", ...jQueryFunctions) ||
        utils_1.isMemberExpression(callee, "jQuery", ...jQueryFunctions)) {
        context.report({ message: MESSAGE, node: callee });
        return;
    }
    const [moduleName, expression] = getNodeModule(callee, context);
    if (expression && isQuestionable(expression, moduleName)) {
        context.report({
            message: MESSAGE,
            node: callee,
        });
        return;
    }
    // open calls may be questionable when they are called on a httpRequestConstructors
    if (expression && utils_1.isIdentifier(expression, "open")) {
        openCalls.push(callee);
    }
}
function isGlobalIdentifier(callee, ...values) {
    return utils_1.isIdentifier(callee, ...values) || utils_1.isMemberExpression(callee, "window", ...values);
}
function getNodeModule(callee, context) {
    let moduleName;
    let expression;
    if (callee.type === "MemberExpression" && callee.object.type === "Identifier") {
        moduleName = utils_1.getModuleNameOfIdentifier(callee.object, context);
        expression = callee.property;
    }
    if (callee.type === "Identifier") {
        moduleName =
            utils_1.getModuleNameOfImportedIdentifier(callee, context) ||
                utils_1.getModuleNameOfIdentifier(callee, context);
        expression = callee;
    }
    return [moduleName, expression];
}
function isQuestionable(expression, moduleName) {
    if (!moduleName || expression.type !== "Identifier") {
        return false;
    }
    const questionableFunctions = httpModules[String(moduleName.value)];
    return questionableFunctions && questionableFunctions.has(expression.name);
}
//# sourceMappingURL=http-requests.js.map