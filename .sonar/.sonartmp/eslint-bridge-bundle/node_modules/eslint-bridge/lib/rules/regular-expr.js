"use strict";
/*
 * SonarQube JavaScript Plugin
 * Copyright (C) 2011-2019 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
// https://jira.sonarsource.com/browse/RSPEC-4784
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
const stringMethods = ["match", "search", "replace", "split"];
const regexMethods = ["exec", "test"];
const message = "Make sure that using a regular expression is safe here.";
exports.rule = {
    create(context) {
        return {
            CallExpression(node) {
                const { callee, arguments: args } = node;
                checkStringMethods(callee, args, context);
                checkRegexMethods(callee, args, context);
            },
        };
    },
};
function checkStringMethods(callee, args, context) {
    if (utils_1.isMemberWithProperty(callee, ...stringMethods) && args[0] && !isStringLiteral(args[0])) {
        report(args[0], context);
    }
}
function checkRegexMethods(callee, args, context) {
    if (callee.type === "MemberExpression" &&
        utils_1.isMemberWithProperty(callee, ...regexMethods) &&
        args.length === 1 &&
        !isChildProcess(callee.object, context)) {
        report(callee.object, context);
    }
}
function report(node, context) {
    if (!isSafeRegexLiteral(node)) {
        context.report({
            message,
            node,
        });
    }
}
function isStringLiteral(node) {
    return node.type === "Literal" && typeof node.value === "string";
}
function isSafeRegexLiteral(node) {
    if (node.type === "Literal" && node.regex) {
        const pattern = node.regex.pattern;
        return pattern.length <= 1 || pattern.match(/^[\^$\w\\]+$/);
    }
    return false;
}
function isChildProcess(node, context) {
    const module = node.type === "Identifier" && utils_1.getModuleNameOfIdentifier(node, context);
    return module && module.value === "child_process";
}
//# sourceMappingURL=regular-expr.js.map