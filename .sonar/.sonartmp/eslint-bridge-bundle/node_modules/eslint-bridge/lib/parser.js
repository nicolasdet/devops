"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * SonarQube JavaScript Plugin
 * Copyright (C) 2011-2019 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
const espree = require("espree");
const babel = require("babel-eslint");
const eslint_1 = require("eslint");
exports.PARSER_CONFIG_MODULE = {
    tokens: true,
    comment: true,
    loc: true,
    range: true,
    ecmaVersion: 2018,
    sourceType: "module",
    codeFrame: false,
    ecmaFeatures: {
        jsx: true,
        globalReturn: true,
    },
};
// 'script' source type forces not strict
exports.PARSER_CONFIG_SCRIPT = Object.assign({}, exports.PARSER_CONFIG_MODULE, { sourceType: "script" });
function parseSourceFile(fileContent, fileUri) {
    let parseFunctions = [espree.parse, babel.parse];
    if (fileContent.includes("@flow")) {
        parseFunctions = [babel.parse];
    }
    let exceptionToReport = null;
    for (const parseFunction of parseFunctions) {
        for (const config of [exports.PARSER_CONFIG_MODULE, exports.PARSER_CONFIG_SCRIPT]) {
            const result = parse(parseFunction, config, fileContent);
            if (result instanceof eslint_1.SourceCode) {
                return result;
            }
            else if (!exceptionToReport) {
                exceptionToReport = result;
            }
        }
    }
    if (exceptionToReport) {
        console.error(`Failed to parse file [${fileUri}] at line ${exceptionToReport.lineNumber}: ${exceptionToReport.message}`);
    }
}
exports.parseSourceFile = parseSourceFile;
function parse(parse, config, fileContent) {
    try {
        const ast = parse(fileContent, config);
        return new eslint_1.SourceCode(fileContent, ast);
    }
    catch (exception) {
        return exception;
    }
}
exports.parse = parse;
//# sourceMappingURL=parser.js.map